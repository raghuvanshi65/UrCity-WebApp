{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anura\\\\Desktop\\\\Code\\\\web\\\\UrCity\\\\urcity-webapp\\\\src\\\\Contexts\\\\GeolocationContextProvider.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useState, useContext, useReducer, useEffect } from 'react';\nimport { city, astroIndore } from '../Objects/Defaults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeolocationContext = /*#__PURE__*/React.createContext();\n\nfunction GeolocationContextProvider({\n  children\n}) {\n  _s();\n\n  const [coordinates, setCoordinates] = useState({\n    latitude: 23,\n    longitude: 33\n  });\n  const [weather, setWeather] = useState(city);\n  const [astro, setAstro] = useState(astroIndore);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(pos => {\n        console.log(pos);\n        const obj = {\n          latitude: pos.coords.latitude,\n          longitude: pos.coords.longitude\n        };\n        console.log(\"ye nhi\" + JSON.stringify(obj));\n        setCoordinates(obj);\n        console.log(\"yahin to chahiye \" + JSON.stringify(coordinates));\n      });\n    }\n  }, []);\n  useEffect(() => {\n    (async () => {\n      const result = await axios(`https://api.weatherapi.com/v1/forecast.json?key=2f5ed0f02a36426286744817202012&q=${coordinates.latitude},${coordinates.longitude}&days=1`);\n      const indore = await axios(`https://api.weatherapi.com/v1/astronomy.json?key=2f5ed0f02a36426286744817202012&q=${coordinates.latitude},${coordinates.longitude}&dt=${weather.location.localtime.split(\" \")[0]}`);\n      setWeather(result.data);\n      setAstro(indore.data);\n    })();\n  }, [coordinates]);\n  return /*#__PURE__*/_jsxDEV(GeolocationContext.Provider, {\n    value: {\n      coordinates,\n      weather,\n      astro\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GeolocationContextProvider, \"DnQdaOYwhNIfElJ4ccrumwHPWtE=\");\n\n_c = GeolocationContextProvider;\nexport default GeolocationContextProvider;\nexport { GeolocationContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"GeolocationContextProvider\");","map":{"version":3,"sources":["C:/Users/anura/Desktop/Code/web/UrCity/urcity-webapp/src/Contexts/GeolocationContextProvider.js"],"names":["axios","React","useState","useContext","useReducer","useEffect","city","astroIndore","GeolocationContext","createContext","GeolocationContextProvider","children","coordinates","setCoordinates","latitude","longitude","weather","setWeather","astro","setAstro","navigator","geolocation","getCurrentPosition","pos","console","log","obj","coords","JSON","stringify","result","indore","location","localtime","split","data"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA2BC,UAA3B,EAAwCC,UAAxC,EAAqDC,SAArD,QAAsE,OAAtE;AACA,SAASC,IAAT,EAAgBC,WAAhB,QAAkC,qBAAlC;;AAEA,MAAMC,kBAAkB,gBAAGP,KAAK,CAACQ,aAAN,EAA3B;;AAEA,SAASC,0BAAT,CAAoC;AAACC,EAAAA;AAAD,CAApC,EAAgD;AAAA;;AAE5C,QAAM,CAACC,WAAD,EAAeC,cAAf,IAAiCX,QAAQ,CAAC;AAC5CY,IAAAA,QAAQ,EAAG,EADiC;AAE5CC,IAAAA,SAAS,EAAG;AAFgC,GAAD,CAA/C;AAKA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAACI,IAAD,CAAtC;AACA,QAAM,CAACY,KAAD,EAASC,QAAT,IAAqBjB,QAAQ,CAACK,WAAD,CAAnC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGe,SAAS,CAACC,WAAb,EACA;AACID,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,GAAD,IAAO;AAC5CC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,cAAMG,GAAG,GAAG;AACRZ,UAAAA,QAAQ,EAAGS,GAAG,CAACI,MAAJ,CAAWb,QADd;AAERC,UAAAA,SAAS,EAAGQ,GAAG,CAACI,MAAJ,CAAWZ;AAFf,SAAZ;AAIAS,QAAAA,OAAO,CAACC,GAAR,CAAY,WAASG,IAAI,CAACC,SAAL,CAAeH,GAAf,CAArB;AACAb,QAAAA,cAAc,CAACa,GAAD,CAAd;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAoBG,IAAI,CAACC,SAAL,CAAejB,WAAf,CAAhC;AACH,OATD;AAWH;AACJ,GAfQ,EAeN,EAfM,CAAT;AAiBAP,EAAAA,SAAS,CAAC,MACV;AACI,KAAC,YACD;AACI,YAAMyB,MAAM,GAAG,MAAM9B,KAAK,CAAE,oFAAmFY,WAAW,CAACE,QAAS,IAAGF,WAAW,CAACG,SAAU,SAAnI,CAA1B;AACA,YAAMgB,MAAM,GAAG,MAAM/B,KAAK,CAAE,qFAAoFY,WAAW,CAACE,QAAS,IAAGF,WAAW,CAACG,SAAU,OAAMC,OAAO,CAACgB,QAAR,CAAiBC,SAAjB,CAA2BC,KAA3B,CAAiC,GAAjC,EAAsC,CAAtC,CAAyC,EAAnL,CAA1B;AAEAjB,MAAAA,UAAU,CAACa,MAAM,CAACK,IAAR,CAAV;AACAhB,MAAAA,QAAQ,CAACY,MAAM,CAACI,IAAR,CAAR;AACH,KAPD;AAQH,GAVQ,EAUN,CAACvB,WAAD,CAVM,CAAT;AAYA,sBACI,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE;AAChCA,MAAAA,WADgC;AAClBI,MAAAA,OADkB;AACRE,MAAAA;AADQ,KAApC;AAAA,cAGKP;AAHL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GA9CQD,0B;;KAAAA,0B;AAgDT,eAAeA,0BAAf;AACA,SAAQF,kBAAR","sourcesContent":["import axios from 'axios';\r\nimport React , {useState , useContext , useReducer , useEffect } from 'react';\r\nimport { city , astroIndore} from '../Objects/Defaults';\r\n\r\nconst GeolocationContext = React.createContext();\r\n\r\nfunction GeolocationContextProvider({children}) {\r\n\r\n    const [coordinates , setCoordinates] = useState({\r\n        latitude : 23 ,\r\n        longitude : 33 ,\r\n    });\r\n\r\n    const [weather, setWeather] = useState(city);\r\n    const [astro , setAstro] = useState(astroIndore);\r\n\r\n    useEffect(() => {\r\n        if(navigator.geolocation)\r\n        {\r\n            navigator.geolocation.getCurrentPosition((pos)=>{\r\n                console.log(pos);\r\n                const obj = {\r\n                    latitude : pos.coords.latitude , \r\n                    longitude : pos.coords.longitude,\r\n                }\r\n                console.log(\"ye nhi\"+JSON.stringify(obj));\r\n                setCoordinates(obj);\r\n                console.log(\"yahin to chahiye \"+JSON.stringify(coordinates));\r\n            });\r\n            \r\n        }\r\n    }, [])\r\n\r\n    useEffect(()=>\r\n    {\r\n        (async () =>\r\n        {\r\n            const result = await axios(`https://api.weatherapi.com/v1/forecast.json?key=2f5ed0f02a36426286744817202012&q=${coordinates.latitude},${coordinates.longitude}&days=1`);\r\n            const indore = await axios(`https://api.weatherapi.com/v1/astronomy.json?key=2f5ed0f02a36426286744817202012&q=${coordinates.latitude},${coordinates.longitude}&dt=${weather.location.localtime.split(\" \")[0]}`);\r\n        \r\n            setWeather(result.data);\r\n            setAstro(indore.data);\r\n        })();\r\n    }, [coordinates])\r\n\r\n    return (\r\n        <GeolocationContext.Provider value={{\r\n            coordinates , weather , astro\r\n        }}>\r\n            {children}\r\n        </GeolocationContext.Provider>\r\n    )\r\n}\r\n\r\nexport default GeolocationContextProvider\r\nexport {GeolocationContext};\r\n"]},"metadata":{},"sourceType":"module"}